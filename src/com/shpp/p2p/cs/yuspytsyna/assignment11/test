public static void main(String[] args) {
        //check(new String[]{"1+(2+3*(4+5-sin(45*cos(a))))/7", "a=2"}, 5.09);
        //check(new String[]{"sin(cos(tan(1)))"}, 0.01);
        //check(new String[]{"tan(atan(sin(cos(log2(16)))))"}, -0.60); ///-
        //check(new String[]{"log10(sqrt(100))"}, 1);
        //check(new String[]{"log2(2^3)"}, 3);
        check(new String[]{ "sqrt(cos(45)+sin(45)) + s" , "s =4"}, 5.17); ///-
        //check(new String[]{ "log2(8)"}, 3);


        // args = new String[]{"1+(2+3*(4+5-sin(45*cos(a))))/7", "a=2"}; //-


    }

    private static double test(String[] args) {
        // Calculate the processed expression
        String evaluateString = calculate(args);

        // Create a map of variables and their values from the input arguments
        variableValues = createVariables(args);


        // Evaluate the entire expression and get the result
        double result = evaluateExpression(evaluateString);

        /*if (!Double.isNaN(result)) {
            System.out.println("Result: " + result);
        }*/

        return result;
    }

    private static void check(String[] text, double expectedResult) {
        double originalValue = test(text);
        BigDecimal roundedValue = new BigDecimal(originalValue).setScale(2, RoundingMode.HALF_UP);

        BigDecimal expectedBigDecimal = new BigDecimal(expectedResult).setScale(2, RoundingMode.HALF_UP);

        if (roundedValue.equals(expectedBigDecimal)) {
            System.out.println("  Pass: " + Arrays.toString(text) + "  " + test(text) + "  " + expectedResult);
        } else {
            System.out.println("! FAIL: " + Arrays.toString(text) + "  " + test(text) + "  " + expectedResult);
        }
    }

    import javax.imageio.ImageIO;
    import java.awt.*;
    import java.awt.image.BufferedImage;
    import java.io.File;
    import java.io.IOException;

    public class SilhouetteCounterDFS {

        private static final int[][] DIRECTIONS = {
                {-1, 0}, {1, 0}, {0, -1}, {0, 1}
        };

        private int minSilhouetteSize;
        private int backgroundThreshold;  // Adjust this threshold accordingly

        public SilhouetteCounterDFS(int minSilhouetteSize, int backgroundThreshold) {
            this.minSilhouetteSize = minSilhouetteSize;
            this.backgroundThreshold = backgroundThreshold;
        }

        public int countSilhouettes(int[][] image) {
            if (image == null || image.length == 0 || image[0].length == 0) {
                return 0;
            }

            int count = 0;
            int rows = image.length;
            int cols = image[0].length;
            boolean[][] visited = new boolean[rows][cols];

            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < cols; j++) {
                    if (image[i][j] == 1 && !visited[i][j]) {
                        int silhouetteSize = dfs(image, visited, i, j, rows, cols);
                        if (silhouetteSize >= minSilhouetteSize) {
                            count++;
                        }
                    }
                }
            }

            return count;
        }

        private int dfs(int[][] image, boolean[][] visited, int i, int j, int rows, int cols) {
            if (i < 0 || i >= rows || j < 0 || j >= cols || image[i][j] == 0 || visited[i][j])
                return 0;

            visited[i][j] = true;

            int size = 1;

            for (int[] direction : DIRECTIONS) {
                int newRow = i + direction[0];
                int newCol = j + direction[1];
                size += dfs(image, visited, newRow, newCol, rows, cols);
            }

            return size;
        }

        public static void main(String[] args) {
            try {
                BufferedImage image = ImageIO.read(new File("test6.jpg"));
                int width = image.getWidth();
                int height = image.getHeight();
                int[][] imageArray = new int[height][width];

                // Choose a threshold to determine the background color
                int backgroundThreshold = 100;  // Adjust as needed

                // Convert the image to a binary array
                for (int y = 0; y < height; y++) {
                    for (int x = 0; x < width; x++) {
                        Color color = new Color(image.getRGB(x, y));
                        // Compare color brightness to the threshold to determine silhouette or background
                        imageArray[y][x] = (getBrightness(color) < backgroundThreshold) ? 1 : 0;
                    }
                }

                // Count silhouettes with a minimum size of 100 pixels
                SilhouetteCounterDFS counter = new SilhouetteCounterDFS(100, backgroundThreshold);
                int silhouetteCount = counter.countSilhouettes(imageArray);
                System.out.println("Number of silhouettes: " + silhouetteCount);

            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        // Helper method to calculate brightness of a color
        private static int getBrightness(Color color) {
            return (int) Math.sqrt(
                    0.299 * color.getRed() * color.getRed() +
                            0.587 * color.getGreen() * color.getGreen() +
                            0.114 * color.getBlue() * color.getBlue()
            );
        }
    }
